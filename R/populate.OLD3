#' @export
bh_populate<-function(cellPrototype = NULL,
                      proportion = NULL,
                      maxCloning = 10,
                      tissue = NULL,
                      areaTresh = NULL){
  
  
  
  areaTot<-0
  cloningI<-maxCloning+1
  lim <-raster::extent(tissue)
  res <-raster::res(tissue)
  minResHalf<-min(res)
  cellNames<-sapply(cellPrototype,names,simplify = T,USE.NAMES = F)
  
  blob<-sf::st_sfc(NULL,crs = 'NA',precision = minResHalf)
  possibleXY<-raster::raster(vals=0,ext=lim,resolution=res)
  areaTresh<-(lim[2]-lim[1])*(lim[4]-lim[3])*areaTresh
  
  newCellList<-sapply(1:length(cellNames),function(clnms){
    vector('list',round(areaTresh*proportion[clnms]))},simplify = F,USE.NAMES = F)
  
  names(newCellList)<-cellNames
  newCellType_counter<-rep(1,length(cellNames))
  names(newCellType_counter)<-cellNames
  
  # newBar<-utils::txtProgressBar(min=0,max=areaTresh,initial=0,style=3)
  
  while(areaTot<areaTresh){
    
    if (cloningI>maxCloning){
      newCellType<-sample(1:length(cellPrototype),1,prob = proportion)
      
      position<-raster::Which(possibleXY==0,cells=T)
      position<-sample(position,1)
      position<-raster::xyFromCell(object = tissue,cell = position)
      
      newCellClone<-bh_create(cellPrototype[[newCellType]],
                              lox = position[,'x'],
                              loy = position[,'y'])
      
      if (class(newCellClone)!='cell') {
        cat('XX-> bad cell')
        next}
      
      newCell<-newCellClone
      
      newComp<-try(sapply(c('cytoplasm',
                            'nucleus',
                            'organelle'),
                          function(cmp){
                            
                            newComp<-slot(newCell,cmp)$outline
                          },USE.NAMES = T,simplify = F),silent = T)
      
      if (inherits(newComp,'try-error')){ 
        cat('x-->bad cell\n')
        cloningI<-maxCloning+1
        next
      }
      
      unionCell<-try(sf::st_union(do.call(c,newComp),crs = 'NA',precision = minResHalf),silent = T)
      
      if (inherits(unionCell,'try-error')){
        cat('xx->bad union cell\n')
        cloningI<-maxCloning+1
        next
      }
      
      area_unionCell<-sf::st_area(unionCell)
      area_cell<-sf::st_area(slot(newCell,'cytoplasm')$outline)
      
      if (area_unionCell>area_cell){
        cat('xx->bad area cell\n')
        cloningI<-maxCloning+1
        next
      }
      
      cloningI <-1
      cat('---> created new cell clone\n')
    } else {
      position<-raster::Which(possibleXY==0,cells=T)
      position<-sample(position,1)
      position<-raster::xyFromCell(object = tissue,cell = position)
      
      newCell<-bh_clone(cell = newCellClone,
                        lox = position[,'x'],
                        loy = position[,'y'])
      
      newComp<-try(sapply(c('cytoplasm',
                            'nucleus',
                            'organelle'),
                          function(cmp){
                            
                            newComp<-slot(newCell,cmp)$outline
                          },USE.NAMES = T,simplify = F),silent = T)
      
      if (inherits(newComp,'try-error')){ 
        cat('x-->bad cell\n')
        cloningI<-maxCloning+1
        next
      }
      
      unionCell<-try(sf::st_union(do.call(c,newComp),crs = 'NA',precision = minResHalf),silent = T)
      
      if (inherits(unionCell,'try-error')){ 
        cat('x-->bad cell\n')
        cloningI<-maxCloning+1
        next
      }
      
      cloningI <- cloningI+1
    }
    
    xyCoverage<-exactextractr::exact_extract(possibleXY,sf::st_sfc(unionCell),include_xy=T)
    xyCoverage<-raster::cellFromXY(possibleXY,xyCoverage[[1]][,c('x','y')])
    possibleXY[xyCoverage]<-1
    newCellList[[newCellType]][[newCellType_counter[newCellType]]]<-newCell
    newCellType_counter[newCellType]<-newCellType_counter[newCellType]+1
    areaTot<-areaTot+length(xyCoverage)
    
    cat(paste0('area ratio: ',scales::label_percent(accuracy = 0.1)(areaTot/areaTresh),'\n'))
    # setTxtProgressBar(newBar,areaTot)
    
  }  
  
  # close(newBar)
  whichToGetRid<-lapply(newCellList,function(x){
    sapply(x,is.null,simplify = T)})
  out_newCellList<-lapply(1:length(newCellList),function(x){
    newCellList[[x]][!whichToGetRid[[x]]]})
  names(out_newCellList)<-names(newCellList)
  
  bodyOnly<-lapply(names(out_newCellList),function(Ncls){
    
    cls<-out_newCellList[[Ncls]]
    out<-lapply(cls,function(cl){
      slot(cl,'cytoplasm')$outline})
    out<-do.call(c,out)
    
    if (is.null(out)) out<-sf::st_sfc(NULL)
    out<-sf::st_sf(data.frame(ID=1:length(out),
                              cell=Ncls,
                              geom=out))
    
    
    return(out)
  })
  
  bodyOnly<-do.call(dplyr::bind_rows,bodyOnly)
  molds<-sf::st_difference(bodyOnly)
  
  for (i in 1:nrow(molds)){
    mold<-molds[i,'geometry']
    index<-unlist(sf::st_drop_geometry(molds[i,'ID']))
    cell<-as.character(unlist(sf::st_drop_geometry(molds[i,'cell'])))
    for (compartment in c('cytoplasm','nucleus','organelle')){
      oldGeom<-slot(out_newCellList[[cell]][[index]],compartment)$outline
      newGeom<-sf::st_intersection(oldGeom,mold)
      
      # par(mfrow=c(1,3))
      # try(plot(mold))
      # try(plot(oldGeom))
      # try(plot(newGeom))
      if (length(newGeom)==0) newGeom<-sf::st_sfc(NULL) else{
        if (any(class(newGeom)=='sfc_GEOMETRYCOLLECTION')) {
          stArea<-sapply(newGeom[[1]],sf::st_area,simplify = T,USE.NAMES = F)
          maxStArea<-which.max(stArea)[1]
          stGeom<-lapply(newGeom[[1]],sf::st_sfc)
          newGeom<-stGeom[[maxStArea]]
        }
      }
      slot(out_newCellList[[cell]][[index]],compartment)$outline<-newGeom
    }
  }
  
  browser()
  return(out_newCellList)
}


